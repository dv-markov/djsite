# Create your models here
# здесь сохраняются все классы моделей приложения
# пакет models содержит базовые классы моделей, на основании которых можно создавать свои модели таблиц баз данных
from django.db import models
from django.urls import reverse


class Women(models.Model):
    # Поле id уже прописано в классе Model,
    # описание доступных типов полей класса см. в документации: djbook.ru
    title = models.CharField(max_length=255)
    content = models.TextField(blank=True)
    photo = models.ImageField(upload_to="photos/%Y/%m/%d/")
    time_create = models.DateTimeField(auto_now_add=True)
    time_update = models.DateTimeField(auto_now=True)
    is_published = models.BooleanField(default=True)

    def __str__(self):
        return f"{self.title}, id:{self.pk}"

    # более предпочтительный подход для ссылок, связанных с базой данных
    def get_absolute_url(self):
        return reverse('post', kwargs={'post_id': self.pk})

# Создание таблицы в базе данных на основе модели.
# Для этого в Джанго существует механизм создания и выполнения миграций для баз данных.

# Миграции - модули языка Python, в которых прописаны команды на уровне ORM-интерфейса
# для создания таблиц определенных структур.

# При выполнении файла миграции в базе данных создаются новые или изменяются существующие таблицы,
# а также связи между ними.
# Каждый новый файл помещается в папке migrations соответствующего приложения.
# На основе файлов миграции создается структура таблиц в базе данных.

# Каждый файл миграции описывает лишь изменения в структуре таблиц, которые произошли с прошлого раза.
# Их можно рассматривать, как контроллеры версии.
# Благодаря этому, можно всегда откатиться к предыдущей структуре
# и продолжить работу с предыдущими связями между таблицами.

# При разработке сайте структуру таблиц лучше продумывать заранее и потом не менять.


# CRUD - Create, Read, Update, Delete
# Система работы с ORM-моделями Django
# ORM - независимость от типа БД и оптимизация скорости выполнения


# Каждый класс модели содержит специальный статический объект - objects
# Он наследуется от базового класса модели Model и представляет собой ссылку на специальный класс-менеджер
# Например, Women.objects






